Handmade Hero Day 080 - Handling Traversables in the Collision Loop
  
Summary:
continuation of Day 079
changed the collision loop to accomodate traversing inside rooms 

Keyword: 
physics collision


4:49
dicussing about the new collision algorithm that adds in the concept of 
traveling in empty boxes and colliding with filled boxes

find the minimum t when we hit filled boxes (which is something we are already doing);
find the maximum t to see where we can travel to in empty boxes






5:26
so we begin to refactor the MoveEntity function
we added the tMax variable, the idea is that we want to see how far you can go amon empty boxes untill you hit the boundary
of one of those empty boxes

				internal void
				MoveEntity(game_state *GameState, sim_region *SimRegion, sim_entity *Entity, real32 dt,
				           move_spec *MoveSpec, v3 ddP)
				{
					...
					...

				    for(uint32 Iteration = 0; Iteration < 4; ++Iteration)
				    {
				        real32 tMin = 1.0f;
				        real32 tMax = 0.0f;

				        ...
				        ...

				    }

				}







27:11
Continuing on with the MoveEntity code changes, now that we have to test two types of stuff 
1.	collision with the walls of Rooms 
2.	other filled entities 

our if condition check with TestEntity has changed 

-	we check against the sides/boundaries of a room 
if the test Entity is a room and  
if the entity is inside that room 

				(IsSet(TestEntity, EntityFlag_Traversable) && EntitiesOverlap(Entity, TestEntity, OverlapEpsilon*V3(1, 1, 1)))

	the EntityFlag_Traversable entity flag checks if an test Entity is a room 

	the second part checks if you are inside of it


-	the second type of entity is regular entities 
			
				CanCollide(GameState, Entity, TestEntity))

	this is what we previoiusly have 


				internal void
				MoveEntity(game_state *GameState, sim_region *SimRegion, sim_entity *Entity, real32 dt, move_spec *MoveSpec, v3 ddP)
				{
					...
					...

				    for(uint32 Iteration = 0; Iteration < 4; ++Iteration)
				    {
				        real32 tMin = 1.0f;
				        real32 tMax = 0.0f;

				        ...
				        ...

		                for(uint32 TestHighEntityIndex = 0; TestHighEntityIndex < SimRegion->EntityCount; ++TestHighEntityIndex)
		                {
		                    sim_entity *TestEntity = SimRegion->Entities + TestHighEntityIndex;

		                    // TODO(casey): Robustness!
		                    real32 OverlapEpsilon = 0.001f;
		                    
		                    if((IsSet(TestEntity, EntityFlag_Traversable) && EntitiesOverlap(Entity, TestEntity, OverlapEpsilon*V3(1, 1, 1))) ||
		                       CanCollide(GameState, Entity, TestEntity))
		                    {

		                    	...
		                    	...
		                    }
		                }
		            
		                ...
		                ...
		            }

		            ...
		            ...
		        }





27:08 
Continuing on, the code we now ant to find tMin and tMax respectively depending on whther you are in the room + inside the room case 
or just regular filled entities case

-	notice the key code is 

                if(IsSet(TestEntity, EntityFlag_Traversable))
                {
                    find tMax
                }
                else
                {
                    find tMin
                }

full code below

				internal void
				MoveEntity(game_state *GameState, sim_region *SimRegion, sim_entity *Entity, real32 dt, move_spec *MoveSpec, v3 ddP)
				{
					...
				    for(uint32 Iteration = 0; Iteration < 4; ++Iteration)
				    {
				        real32 tMin = 1.0f;
				        real32 tMax = 0.0f;

				        ...

		                for(uint32 TestHighEntityIndex = 0; TestHighEntityIndex < SimRegion->EntityCount; ++TestHighEntityIndex)
		                {
		                    sim_entity *TestEntity = SimRegion->Entities + TestHighEntityIndex;

		                    ...
		                    ...

		                    
		                    if( checking two types we want: rooms + inside the room,  regular entities )
		                    {

		                        for( all entity volumes )
		                        {
		                        	...

		                            for(all testEntity volumes)
		                            {		                            	
		                            	...

		                                if( two volumes collide )
		                                {
		                                    test_wall Walls[] = getting the four walls

		                                    if(IsSet(TestEntity, EntityFlag_Traversable))
		                                    {
		                                        find tMax
		                                    }
		                                    else
		                                    {
		                                        find tMin
		                                    }
		                                }
		                            }
		                        }
		                    }
		                }
		            
		                ...
		                ...
		            }

		            ...
		            ...
		        }









19:14
the find tMax case is pretty much opposite of what we previously have. 
we previously had the case where when we collide with filled entities, we are finding the tMin.
here we are just finding the tMax


	                        if(IsSet(TestEntity, EntityFlag_Traversable))
	                        {
	                            real32 tMaxTest = tMax;

	                            ...
	                            ...

	                            for(uint32 WallIndex = 0; WallIndex < ArrayCount(Walls); ++WallIndex)
	                            {
	                                test_wall *Wall = Walls + WallIndex;

	                                ...
	                                ...

	                                if((tResult >= 0.0f) && (tMaxTest < tResult))
	                                {
	                                    if((Y >= Wall->MinY) && (Y <= Wall->MaxY))
	                                    {
	                                        tMaxTest = Maximum(0.0f, tResult - tEpsilon);
	                                        TestWallNormal = Wall->Normal;
	                                        HitThis = true;
	                                    }
	                                }
	                            }

	                            if(HitThis)
	                            {
	                                tMax = tMaxTest;
	                                WallNormalMax = TestWallNormal;
	                                HitEntityMax = TestEntity;
	                            }
	                        }
	                        else
	                        {
	                        	// logic for filled stuff
	                        	// logic for updating tMin
	                        	...
	                        	...
	                        	...
	                        }	                        







24:48
then after we have gathered tMin and tMax, we picked the lesser of the two
we gotta do something about it


			    for(uint32 Iteration = 0; Iteration < 4; ++Iteration)
			    {
				     
			    	...
			    	...

			    	// finding tMax

			    	// finding tMin


		            v3 WallNormal;
		            sim_entity *HitEntity;
		            real32 tStop;
		            if(tMin < tMax)
		            {
		                tStop = tMin;
		                HitEntity = HitEntityMin;
		                WallNormal = WallNormalMin;
		            }
		            else
		            {
		                tStop = tMax;
		                HitEntity = HitEntityMax;
		                WallNormal = WallNormalMax;
		            }
		        }







